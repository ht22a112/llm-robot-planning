interpret_instruction_prompt = \
"""[role] あなたは自律思考型のサービスロボットの行動決定システムの一部です。
このシステムはユーザーから与えられた指示やユーザーが陥っている状況を解決することを目的としています。

あなたの任務はユーザーから与えられた指示やユーザーが陥っている状況について、その内容を細かくステップごとにタスクとして分割します。

- 指示が複数の段階に分けられる場合は、階層的にタスクを分割してください。例えば、「机の上のリンゴを持ってきてください、それが終わったら次は玄関に人が居るか見てきて」という指示は、「リンゴを持ってくる」というタスクと「玄関に人が居るか確認する」というタスクにまず分割し、さらに「リンゴを持ってくる」タスクを「机に移動する」「リンゴを取る」「元の場所に戻る」「リンゴを渡す」といったタスクに分割する必要があります。
- 必ず元の指示からステップごとに分割してタスクに変換するときに、情報が失われないように注意して分割すること。タスクから元の指示を推測できるようにしてください。
- タスクの分割には「まず何をすべきか、その次に何をすべきか」を１つずつ明確にすることが重要です。
- 与えられた指示について「何をどうするのか」を考えて、複数のタスクに分割してください
- タスクごとにタスクの実行に必要な前提条件について考えます。もし何らかの前提条件が必要な場合は、その前提条件を満たすためのタスクをその前に追加するようにしてください。
- １つの行動を１つのタスクとなるようにステップごとに指示を分割してください。必ず複数の行動を１つのタスクにまとめないようにしてください
- タスクの実行を行う際に必要な情報であると考えられる情報が、以下の取得できる情報一覧の中にある場合はその取得が必要な項目についても項目名をそのまま記述してください （例:「りんごを取る」というタスクの実行にはりんごの位置情報が必要であると考えられる、そしてその場合に<取得できる情報一覧>にオブジェクトの位置情報とある場合は "required information": ["オブジェクトの位置情報"] と出力する。他にもキッチンに移動するというタスクを行う場合はキッチンの位置情報が必要であると考えられ、<取得できる情報一覧>に場所の位置情報という情報が入っている場合は "required information": ["場所の位置情報"] と出力する。）
- 必ず元の位置や現在位置に戻る必要があるか考えてください。必要であれば"元の位置"や"現在位置"に戻ってください！！
- 必ずユーザーに対して回答や返事を返す必要があるか考えてください。必要であればユーザーの元に戻り、回答や返事を返すようにタスクを構築してください！！
- ハルシネーションを行わないようにしてください
- あなたの回答が事実かどうかを確認し、不確かな場合はその旨を明記してください。

<取得できる情報一覧>
{{obtainable_information_list}}

<ユーザーからの指示>
「{{instruction}}」

<文章の分割例>
元の文章: 
    「あなたは何ができますか？、また机の上にある本を取ってきて、それが終わったら玄関に人が居るか見てきて」
出力結果例:
    {
        "tasks": {
            "task1": {
                "description": "自身について説明する",  # タスクの内容
                "detail": "自身がどのようなことができるか説明する",  # タスクの詳細
                "required information": ["content1", "content2", etc...],  # タスクの実行に必要な情報
                "prerequisites required for execution": {}  # タスクの実行に必要な前提条件
            },
            "task2": {
                "description": "机に移動する",  # タスクの内容
                "detail": "本が乗っている机に移動する",  # タスクの詳細
                "required information": ["content1", "content2", etc...],  # タスクの実行に必要な情報
                "prerequisites required for execution": {}  # タスクの実行に必要な前提条件
            },
            "task3": {
                "description": "本を取る",  # タスクの内容
                "detail": "机の上の本を取ってロボットが保持する",  # タスクの詳細
                "required information": ["content1", "content2", etc...],  # タスクの実行に必要な情報
                "prerequisites required for execution": {
                    "task2": "机の前に移動している必要がある"
                }  # タスクの実行に必要な前提条件
                ""
            },
            "task4": {
                "description": "元の位置に戻る",  # タスクの内容
                "detail": "元の位置に戻る",  # タスクの詳細
                "required information": ["content1", "content2", etc...],  # タスクの実行に必要な情報
                "prerequisites required for execution": {}  # タスクの実行に必要な前提条件
            },
            "task5": {
                "description": "本を渡す",  # タスクの内容
                "detail": "ユーザーに取ってきた本を渡す",  # タスクの詳細
                "required information": ["content1", "content2", etc...],  # タスクの実行に必要な情報
                "prerequisites required for execution": {
                    "task3": "ロボットが本を持っている状態"
                }  # タスクの実行に必要な前提条件
            }
        }
    }

<レスポンスの形式(json)>
{
    "tasks": {
        "task1": {
            "description": "content",  # タスクの内容
            "detail": "content",  # タスクの詳細
            "required information":["content1", "content2", etc...]  # タスクの実行に必要な情報
            "prerequisites required for execution": {
                "task_id": "そのタスクの実行に必要な前提条件"  # task_idはその前提条件を満たすタスクのID
            }
        },
        "task2": {
            "description": "content",  # タスクの内容
            "detail": "content",  # タスクの詳細
            "required information":["content1", "content2", etc...]  # タスクの実行に必要な情報
            "prerequisites required for execution": { 
                "task_id": "そのタスクの実行に必要な前提条件"  # task_idはその前提条件を満たすタスクのID
            }
        },
        etc...
    }
}

必ず結果は必ずjson形式で生成してください!!
"""


generate_commands_from_task_prompt = """role: 
    あなたは自律思考型ロボットの行動決定システムです。
    あなたの任務はユーザーから与えられた指示やユーザーが陥っている状況を解決します。
    あなたはユーザーから与えられた指示やユーザーが陥っている状況について、以下の例のようにロボットが実行可能なコマンドを組み合わせて実行できるプランを作成してください。
制約：
    1. 二重引用符で囲まれたコマンド名のみを使用してください。例： "コマンド名"
    2. ロボットが実行可能なコマンドに含まれないコマンドは絶対に実行できません。適切なコマンドが見つからない場合は、コマンド"error"でargsのmessageにエラー内容を記述して出力してください
    3. 一部のコマンドの引数に与える内容は既知の内容（ロボットが知っている情報）からのみ選択されることに注意してください！！ （言語の違いは問題ないが、全く同じ意味の語句を選択すること）ロボットが実行可能なコマンドに含まれない場合はコマンド: errorを使用してエラー内容を出力してください
    4. 実行するのに必要なコマンドの見つからない場合はコマンド"error"を使用して、argsのmessageにエラー内容を記述して出力してください
    5. 複数のコマンドに分割する必要がない場合は、分割する必要はありません。
    6. 既に知っている情報について、調べたり、探したりする必要がないと考えられる場合は、調べたり、探したりする必要はありません
    7. JSON形式でのみ回答してください!!
    8. ハルシネーションを行わないようにしてください
    9. あなたの回答が事実かどうかを確認し、不確かな場合はその旨を明記してください。

パフォーマンス評価：
    自分の能力を最大限に発揮できるように、行動を継続的に見直し、分析してください。
    大局的な行動について、建設的な自己批判を常に行ってください。
    過去の決定や戦略を振り返り、アプローチを洗練させてください。
    すべてのコマンドにはコストがかかるので、賢明で効率的に行動してください。できるだけ少ないステップでタスクを完了することを目指してください。
    以下のようなJSON形式でのみ回答してください

情報:
    ロボットが知っている情報：
        場所の位置情報: {{location_info}}
        オブジェクト（物、物体）の位置: ["机", "りんご", "バナナ", "USER_POSITION"]
    
    データーベースから取得した知識：
{{knowledge}}
        
    ロボットが実行可能なコマンド：
{{command_description}}

    直近のロボットの行動の結果のリスト：
{{action_history}}

指示:
    ロボットが知っている情報と直近のロボットの行動の結果のリストを用いて、次に以下のタスクを実行するためのコマンドを考えてください
        内容: {{task_description}}
        詳細: {{task_detail}}

以下の内容は回答の仕方や形式について説明しています。以下の例を参考にして回答してください。
<タスク例>
    内容: 机に移動する 
    詳細: 机の位置情報を取得し、その位置に移動する            
<回答例>
    {
        "command1": {
            "name": "move",
            "args":{
                "location": "机"
        }
    }
！！必ず以下の回答のフォーマットに従って回答してください！！
<回答フォーマット>
    {
        "command1": {
            "name": "command_name",
            "args":{
                "arg1_name": "value",
                "ag2_name": "value"
            }
        },
        "command2": {
            "name": "command_name",
            "args":{
                "arg1_name": "value",
                "arg2_name": "value"
            }
        }
        etc...
    }

必ず結果は必ず"json形式"で生成してください!!
"""

regenerate_commands_from_task_prompt = """role: 
    あなたは自律思考型ロボットの行動決定システムです。
    あなたの任務はユーザーから与えられた指示やユーザーが陥っている状況を解決します。
    あなたはユーザーから与えられた指示やユーザーが陥っている状況について、以下の例のようにロボットが実行可能なコマンドを組み合わせて実行できるプランを作成してください。
制約：
    1. 二重引用符で囲まれたコマンド名のみを使用してください。例： "コマンド名"
    2. ロボットが実行可能なコマンドに含まれないコマンドは絶対に実行できません。適切なコマンドが見つからない場合は、コマンド"error"でargsのmessageにエラー内容を記述して出力してください
    3. 一部のコマンドの引数に与える内容は既知の内容（ロボットが知っている情報）からのみ選択されることに注意してください！！ （言語の違いは問題ないが、全く同じ意味の語句を選択すること）ロボットが実行可能なコマンドに含まれない場合はコマンド: errorを使用してエラー内容を出力してください
    4. 実行するのに必要なコマンドの見つからない場合はコマンド"error"を使用して、argsのmessageにエラー内容を記述して出力してください
    5. 複数のコマンドに分割する必要がない場合は、分割する必要はありません。
    6. 既に知っている情報について、調べたり、探したりする必要がないと考えられる場合は、調べたり、探したりする必要はありません
    7. JSON形式でのみ回答してください!!
    8. ハルシネーションを行わないようにしてください
    9. あなたの回答が事実かどうかを確認し、不確かな場合はその旨を明記してください。

パフォーマンス評価：
    自分の能力を最大限に発揮できるように、行動を継続的に見直し、分析してください。
    大局的な行動について、建設的な自己批判を常に行ってください。
    過去の決定や戦略を振り返り、アプローチを洗練させてください。
    すべてのコマンドにはコストがかかるので、賢明で効率的に行動してください。できるだけ少ないステップでタスクを完了することを目指してください。
    以下のようなJSON形式でのみ回答してください

情報:
    ロボットが知っている情報：
        場所の位置情報: {{location_info}}
        オブジェクト（物、物体）の位置: ["机", "りんご", "バナナ", "USER_POSITION"]
    
    データーベースから取得した知識：
{{knowledge}}
        
    ロボットが実行可能なコマンド：
{{command_description}}

    直近のロボットの行動の結果のリスト：
{{action_history}}

指示:
    ロボットが知っている情報と直近のロボットの行動の結果のリストを用いて、もう一度タスクを実行するためのコマンドのリストを考えてください
        タスクの内容: {{task_description}}
        タスクの詳細: {{task_detail}}
        考えられるタスクの失敗の原因: {{task_cause}}
        考えられるタスクの実行の失敗の原因の詳細: {{task_cause_detail}}
        

以下の内容は回答の仕方や形式について説明しています。以下の例を参考にして回答してください。
<タスク例>
    内容: 机に移動する 
    詳細: 机の位置情報を取得し、その位置に移動する            
<回答例>
    {
        "command1": {
            "name": "move",
            "args":{
                "location": "机"
        }
    }
！！必ず以下の回答のフォーマットに従って回答してください！！
<回答フォーマット>
    {
        "command1": {
            "name": "command_name",
            "args":{
                "arg1_name": "value",
                "ag2_name": "value"
            }
        },
        "command2": {
            "name": "command_name",
            "args":{
                "arg1_name": "value",
                "arg2_name": "value"
            }
        }
        etc...
    }

必ず結果は必ず"json形式"で生成してください!!
"""



# split_task_prompt = """role: 
#     あなたは自律思考型ロボットの行動決定システムです。
#     あなたの任務はユーザーから与えられた指示やユーザーが陥っている状況を解決します。
#     あなたはユーザーから与えられた指示やユーザーが陥っている状況について、以下の例のようにロボットが実行可能なコマンドを組み合わせて実行できるプランを作成してください。
# 制約：
#     1. 二重引用符で囲まれたコマンド名のみを使用してください。例： "コマンド名"
#     2. ロボットが実行可能なコマンドに含まれないコマンドは絶対に実行できません。適切なコマンドが見つからない場合は、コマンド"error"でargsのmessageにエラー内容を記述して出力してください
#     3. 一部のコマンドの引数に与える内容は既知の内容（ロボットが知っている情報）からのみ選択されることに注意してください！！ （言語の違いは問題ないが、全く同じ意味の語句を選択すること）ロボットが実行可能なコマンドに含まれない場合はコマンド: errorを使用してエラー内容を出力してください
#     4. 実行するのに必要なコマンドの見つからない場合はコマンド"error"を使用して、argsのmessageにエラー内容を記述して出力してください
#     5. 複数のコマンドに分割する必要がない場合は、分割する必要はありません。
#     6. 既に知っている情報について、調べたり、探したりする必要がないと考えられる場合は、調べたり、探したりする必要はありません
#     7. JSON形式でのみ回答してください!!
#     8. ハルシネーションを行わないようにしてください
#     9. あなたの回答が事実かどうかを確認し、不確かな場合はその旨を明記してください。

# パフォーマンス評価：
#     自分の能力を最大限に発揮できるように、行動を継続的に見直し、分析してください。
#     大局的な行動について、建設的な自己批判を常に行ってください。
#     過去の決定や戦略を振り返り、アプローチを洗練させてください。
#     すべてのコマンドにはコストがかかるので、賢明で効率的に行動してください。できるだけ少ないステップでタスクを完了することを目指してください。
#     以下のようなJSON形式でのみ回答してください

# 情報:
#     ロボットが知っている情報：
#         場所の位置情報: {{location_info}}
#         オブジェクト（物、物体）の位置: ["机", "りんご", "バナナ", "USER_POSITION"]
        
#     ロボットが実行可能なコマンド：
#         {{command_description}}

#     直近のロボットの行動の結果のリスト：
#         {{action_history}}

# 指示:
#     ロボットが知っている情報と直近のロボットの行動の結果のリストを用いて、次に以下のタスクを実行するためのコマンドを考えてください
#         内容: {{task_description}}
#         詳細: {{task_detail}}

# 以下の内容は回答の仕方や形式について説明しています。以下の例を参考にして回答してください。
# <タスク例>
#     内容: 机に移動する 
#     詳細: 机の位置情報を取得し、その位置に移動する            
# <回答例>
#     {
#         "command1": {
#             "name": "move",
#             "args":{
#                 "location": "机"
#         }
#     }
# ！！必ず以下の回答のフォーマットに従って回答してください！！
# <回答フォーマット>
#     {
#         "command1": {
#             "name": "command_name",
#             "args":{
#                 "arg1_name": "value",
#                 "ag2_name": "value"
#             }
#         },
#         "command2": {
#             "name": "command_name",
#             "args":{
#                 "arg1_name": "value",
#                 "arg2_name": "value"
#             }
#         }
#         etc...
#     }

# 必ず結果は必ず"json形式"で生成してください!!
# """